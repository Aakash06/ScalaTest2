<statements>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>addUser</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>23</id><start>752</start><end>1135</end><line>21</line><description>scala.concurrent.Future.apply[String](if (password.equals(confirmPassword))
  scala.StringContext.apply(&quot;Password doesn\'t match&quot;).s()
else
  if (AccountServices.this.userDataMap.contains(phoneNumber))
    scala.StringContext.apply(&quot;SomeOne is already registered by this Mobile Number&quot;).s()
  else
    {
      AccountServices.this.userDataMap.+=(scala.this.Predef.any2ArrowAssoc[Long](phoneNumber).-&gt;[models.UserData](models.UserData.apply(firstName, lastName, phoneNumber, password, userName)));
      scala.StringContext.apply(&quot;Congratulations,You are successfully added in Database&quot;).s()
    })(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>41</id><start>1729</start><end>1772</end><line>48</line><description>AccountServices.this.userDataToken.+=(scala.this.Predef.any2ArrowAssoc[Long](mobileNumber).-&gt;[String](accessToken))</description><symbolName>scala.collection.mutable.MapLike.+=</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>32</id><start>1467</start><end>1492</end><line>40</line><description>scala.Tuple2.apply[Long, Boolean](mobileNumber, boolResult)</description><symbolName>scala.Tuple2.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>44</id><start>1813</start><end>1856</end><line>52</line><description>scala.StringContext.apply(&quot;Sorry Username or password doesn\'t match&quot;).s()</description><symbolName>scala.StringContext.s</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>35</id><start>1501</start><end>1543</end><line>42</line><description>checkValues.toList.map[Boolean, List[Boolean]](((x$4: (Long, Boolean)) =&gt; x$4._2))(immutable.this.List.canBuildFrom[Boolean]).contains(true)</description><symbolName>scala.collection.LinearSeqOptimized.contains</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>&lt;none&gt;</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>8</id><start>560</start><end>585</end><line>19</line><description>scala.this.Predef.any2ArrowAssoc[Long](8447018441L).-&gt;[String](&quot;Aakash06&quot;)</description><symbolName>scala.Predef.ArrowAssoc.-&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>addUser</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>17</id><start>1002</start><end>1060</end><line>29</line><description>models.UserData.apply(firstName, lastName, phoneNumber, password, userName)</description><symbolName>models.UserData.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>26</id><start>1412</start><end>1416</end><line>38</line><description>true</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>addUser</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>11</id><start>768</start><end>800</end><line>22</line><description>password.equals(confirmPassword)</description><symbolName>java.lang.String.equals</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>38</id><start>1625</start><end>1672</end><line>46</line><description>format.format(java.util.Calendar.getInstance().getTime())</description><symbolName>java.text.DateFormat.format</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>29</id><start>1450</start><end>1455</end><line>39</line><description>false</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>&lt;none&gt;</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>2</id><start>337</start><end>398</end><line>14</line><description>models.UserData.apply(&quot;Aakash&quot;, &quot;Jain&quot;, 8447018441L, &quot;Aakash06&quot;, &quot;aakashjain&quot;)</description><symbolName>models.UserData.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>addUser</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>20</id><start>1068</start><end>1125</end><line>30</line><description>scala.StringContext.apply(&quot;Congratulations,You are successfully added in Database&quot;).s()</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>&lt;none&gt;</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>5</id><start>419</start><end>481</end><line>15</line><description>models.UserData.apply(&quot;Kapil&quot;, &quot;Sharma&quot;, 8978456525L, &quot;Kapil14&quot;, &quot;kapilSharma&quot;)</description><symbolName>models.UserData.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>addUser</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>14</id><start>853</start><end>886</end><line>25</line><description>AccountServices.this.userDataMap.contains(phoneNumber)</description><symbolName>scala.collection.MapLike.contains</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>40</id><start>1746</start><end>1771</end><line>48</line><description>scala.this.Predef.any2ArrowAssoc[Long](mobileNumber).-&gt;[String](accessToken)</description><symbolName>scala.Predef.ArrowAssoc.-&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>addUser</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>13</id><start>809</start><end>834</end><line>23</line><description>scala.StringContext.apply(&quot;Password doesn\'t match&quot;).s()</description><symbolName>scala.StringContext.s</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>&lt;none&gt;</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>4</id><start>404</start><end>415</end><line>15</line><description>8978456525L</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>31</id><start>-1</start><end>-1</end><line>36</line><description>mutable.this.Map.canBuildFrom[(Long, models.UserData), Boolean]</description><symbolName>scala.collection.mutable.Map.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>addUser</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>22</id><start>850</start><end>1131</end><line>25</line><description>if (AccountServices.this.userDataMap.contains(phoneNumber))
  scala.StringContext.apply(&quot;SomeOne is already registered by this Mobile Number&quot;).s()
else
  {
    AccountServices.this.userDataMap.+=(scala.this.Predef.any2ArrowAssoc[Long](phoneNumber).-&gt;[models.UserData](models.UserData.apply(firstName, lastName, phoneNumber, password, userName)));
    scala.StringContext.apply(&quot;Congratulations,You are successfully added in Database&quot;).s()
  }</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>If</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>&lt;none&gt;</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>7</id><start>305</start><end>485</end><line>13</line><description>scala.collection.mutable.Map.apply[Long, models.UserData](scala.this.Predef.any2ArrowAssoc[Long](8447018441L).-&gt;[models.UserData](models.UserData.apply(&quot;Aakash&quot;, &quot;Jain&quot;, 8447018441L, &quot;Aakash06&quot;, &quot;aakashjain&quot;)), scala.this.Predef.any2ArrowAssoc[Long](8978456525L).-&gt;[models.UserData](models.UserData.apply(&quot;Kapil&quot;, &quot;Sharma&quot;, 8978456525L, &quot;Kapil14&quot;, &quot;kapilSharma&quot;)))</description><symbolName>scala.collection.generic.GenMapFactory.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>addUser</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>16</id><start>895</start><end>949</end><line>26</line><description>scala.StringContext.apply(&quot;SomeOne is already registered by this Mobile Number&quot;).s()</description><symbolName>scala.StringContext.s</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>43</id><start>1813</start><end>1856</end><line>52</line><description>scala.StringContext.apply(&quot;Sorry Username or password doesn\'t match&quot;).s()</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>34</id><start>1238</start><end>1492</end><line>36</line><description>AccountServices.this.userDataMap.withFilter(((check$ifrefutable$1: (Long, models.UserData)) =&gt; (check$ifrefutable$1: (Long, models.UserData) @unchecked) match {
  case (_1: Long, _2: models.UserData)(Long, models.UserData)((mobileNumber @ _), (user @ _)) =&gt; true
  case _ =&gt; false
})).map[((Long, models.UserData), Boolean), scala.collection.mutable.Map[(Long, models.UserData),Boolean]](((x$2: (Long, models.UserData)) =&gt; (x$2: (Long, models.UserData) @unchecked) match {
  case (x$1 @ (_1: Long, _2: models.UserData)(Long, models.UserData)((mobileNumber @ _), (user @ _))) =&gt; {
    val boolResult: Boolean = if (user.userName.equals(userName).&amp;&amp;(user.password.equals(password)))
      true
    else
      false;
    scala.Tuple2.apply[(Long, models.UserData), Boolean](x$1, boolResult)
  }
}))(mutable.this.Map.canBuildFrom[(Long, models.UserData), Boolean]).map[(Long, Boolean), scala.collection.mutable.Map[Long,Boolean]](((x$3: ((Long, models.UserData), Boolean)) =&gt; (x$3: ((Long, models.UserData), Boolean) @unchecked) match {
  case (_1: (Long, models.UserData), _2: Boolean)((Long, models.UserData), Boolean)((_1: Long, _2: models.UserData)(Long, models.UserData)((mobileNumber @ _), (user @ _)), (boolResult @ _)) =&gt; scala.Tuple2.apply[Long, Boolean](mobileNumber, boolResult)
}))(mutable.this.Map.canBuildFrom[Long, Boolean])</description><symbolName>scala.collection.TraversableLike.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>25</id><start>1317</start><end>1381</end><line>37</line><description>user.userName.equals(userName).&amp;&amp;(user.password.equals(password))</description><symbolName>scala.Boolean.&amp;&amp;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>37</id><start>1639</start><end>1671</end><line>46</line><description>java.util.Calendar.getInstance().getTime()</description><symbolName>java.util.Calendar.getTime</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>&lt;none&gt;</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>10</id><start>543</start><end>612</end><line>18</line><description>scala.collection.mutable.Map.apply[Long, String](scala.this.Predef.any2ArrowAssoc[Long](8447018441L).-&gt;[String](&quot;Aakash06&quot;), scala.this.Predef.any2ArrowAssoc[Long](8978456525L).-&gt;[String](&quot;kapil14&quot;))</description><symbolName>scala.collection.generic.GenMapFactory.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>&lt;none&gt;</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>1</id><start>322</start><end>333</end><line>14</line><description>8447018441L</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>28</id><start>1450</start><end>1455</end><line>39</line><description>false</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>addUser</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>19</id><start>973</start><end>1061</end><line>29</line><description>AccountServices.this.userDataMap.+=(scala.this.Predef.any2ArrowAssoc[Long](phoneNumber).-&gt;[models.UserData](models.UserData.apply(firstName, lastName, phoneNumber, password, userName)))</description><symbolName>scala.collection.mutable.MapLike.+=</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>45</id><start>1207</start><end>1866</end><line>34</line><description>scala.concurrent.Future.apply[String]({
  val checkValues: scala.collection.mutable.Map[Long,Boolean] = AccountServices.this.userDataMap.withFilter(((check$ifrefutable$1: (Long, models.UserData)) =&gt; (check$ifrefutable$1: (Long, models.UserData) @unchecked) match {
  case (_1: Long, _2: models.UserData)(Long, models.UserData)((mobileNumber @ _), (user @ _)) =&gt; true
  case _ =&gt; false
})).map[((Long, models.UserData), Boolean), scala.collection.mutable.Map[(Long, models.UserData),Boolean]](((x$2: (Long, models.UserData)) =&gt; (x$2: (Long, models.UserData) @unchecked) match {
  case (x$1 @ (_1: Long, _2: models.UserData)(Long, models.UserData)((mobileNumber @ _), (user @ _))) =&gt; {
    val boolResult: Boolean = if (user.userName.equals(userName).&amp;&amp;(user.password.equals(password)))
      true
    else
      false;
    scala.Tuple2.apply[(Long, models.UserData), Boolean](x$1, boolResult)
  }
}))(mutable.this.Map.canBuildFrom[(Long, models.UserData), Boolean]).map[(Long, Boolean), scala.collection.mutable.Map[Long,Boolean]](((x$3: ((Long, models.UserData), Boolean)) =&gt; (x$3: ((Long, models.UserData), Boolean) @unchecked) match {
    case (_1: (Long, models.UserData), _2: Boolean)((Long, models.UserData), Boolean)((_1: Long, _2: models.UserData)(Long, models.UserData)((mobileNumber @ _), (user @ _)), (boolResult @ _)) =&gt; scala.Tuple2.apply[Long, Boolean](mobileNumber, boolResult)
  }))(mutable.this.Map.canBuildFrom[Long, Boolean]);
  if (checkValues.toList.map[Boolean, List[Boolean]](((x$4: (Long, Boolean)) =&gt; x$4._2))(immutable.this.List.canBuildFrom[Boolean]).contains(true))
    {
      val format: java.text.SimpleDateFormat = new java.text.SimpleDateFormat(&quot;d-M-y&quot;);
      val currentDate: String = format.format(java.util.Calendar.getInstance().getTime());
      val accessToken: String = scala.StringContext.apply(&quot;&quot;, &quot; &quot;, &quot;&quot;).s(userName, currentDate);
      AccountServices.this.userDataToken.+=(scala.this.Predef.any2ArrowAssoc[Long](mobileNumber).-&gt;[String](accessToken));
      accessToken
    }
  else
    scala.StringContext.apply(&quot;Sorry Username or password doesn\'t match&quot;).s()
})(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>36</id><start>1571</start><end>1600</end><line>45</line><description>new java.text.SimpleDateFormat(&quot;d-M-y&quot;)</description><symbolName>java.text.SimpleDateFormat.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>27</id><start>1412</start><end>1416</end><line>38</line><description>true</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>&lt;none&gt;</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>9</id><start>587</start><end>611</end><line>19</line><description>scala.this.Predef.any2ArrowAssoc[Long](8978456525L).-&gt;[String](&quot;kapil14&quot;)</description><symbolName>scala.Predef.ArrowAssoc.-&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>addUser</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>18</id><start>989</start><end>1060</end><line>29</line><description>scala.this.Predef.any2ArrowAssoc[Long](phoneNumber).-&gt;[models.UserData](models.UserData.apply(firstName, lastName, phoneNumber, password, userName))</description><symbolName>scala.Predef.ArrowAssoc.-&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>addUser</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>12</id><start>809</start><end>834</end><line>23</line><description>scala.StringContext.apply(&quot;Password doesn\'t match&quot;).s()</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>&lt;none&gt;</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>3</id><start>322</start><end>398</end><line>14</line><description>scala.this.Predef.any2ArrowAssoc[Long](8447018441L).-&gt;[models.UserData](models.UserData.apply(&quot;Aakash&quot;, &quot;Jain&quot;, 8447018441L, &quot;Aakash06&quot;, &quot;aakashjain&quot;))</description><symbolName>scala.Predef.ArrowAssoc.-&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>addUser</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>21</id><start>965</start><end>1131</end><line>28</line><description>{
  AccountServices.this.userDataMap.+=(scala.this.Predef.any2ArrowAssoc[Long](phoneNumber).-&gt;[models.UserData](models.UserData.apply(firstName, lastName, phoneNumber, password, userName)));
  scala.StringContext.apply(&quot;Congratulations,You are successfully added in Database&quot;).s()
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>39</id><start>1697</start><end>1722</end><line>47</line><description>scala.StringContext.apply(&quot;&quot;, &quot; &quot;, &quot;&quot;).s(userName, currentDate)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>30</id><start>-1</start><end>-1</end><line>36</line><description>scala.Tuple2.apply[(Long, models.UserData), Boolean](x$1, boolResult)</description><symbolName>scala.Tuple2.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>42</id><start>1549</start><end>1796</end><line>43</line><description>{
  val format: java.text.SimpleDateFormat = new java.text.SimpleDateFormat(&quot;d-M-y&quot;);
  val currentDate: String = format.format(java.util.Calendar.getInstance().getTime());
  val accessToken: String = scala.StringContext.apply(&quot;&quot;, &quot; &quot;, &quot;&quot;).s(userName, currentDate);
  AccountServices.this.userDataToken.+=(scala.this.Predef.any2ArrowAssoc[Long](mobileNumber).-&gt;[String](accessToken));
  accessToken
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>addUser</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>15</id><start>895</start><end>949</end><line>26</line><description>scala.StringContext.apply(&quot;SomeOne is already registered by this Mobile Number&quot;).s()</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>33</id><start>-1</start><end>-1</end><line>36</line><description>mutable.this.Map.canBuildFrom[Long, Boolean]</description><symbolName>scala.collection.mutable.Map.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>&lt;none&gt;</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>6</id><start>404</start><end>481</end><line>15</line><description>scala.this.Predef.any2ArrowAssoc[Long](8978456525L).-&gt;[models.UserData](models.UserData.apply(&quot;Kapil&quot;, &quot;Sharma&quot;, 8978456525L, &quot;Kapil14&quot;, &quot;kapilSharma&quot;))</description><symbolName>scala.Predef.ArrowAssoc.-&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</source><package>services</package><class>AccountServices</class><classType>Class</classType><fullClassName>services.AccountServices</fullClassName><method>Authenticate</method><path>/home/knoldus/IdeaProjects/ScalaTake2/Account/src/main/scala/service/AccountServices.scala</path><id>24</id><start>1351</start><end>1381</end><line>37</line><description>user.password.equals(password)</description><symbolName>java.lang.String.equals</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
</statements>